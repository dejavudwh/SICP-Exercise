(define (apply-generic op . args)
  (define (raise-type a b)
    (let ((type1 (type-tag a))
          (type2 (type-tag b)))
      (cond ((equal? type1 type2) a)
            ((get 'raise (list type1))
             (raise-type ((get 'raise (list type1)) (contents a)) b))
            (else #f))))

  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc
          (apply proc (map contents args))
          (if ((= length args) 2)
          (let ((a1 (car args))
                (a2 (cadr args)))
            (cond
              ((raise-type a1 a2)
               (apply-generic op (raise-type a1 a2) a2))
              ((raise-type a2 a1)
               (apply-generic op a1 (raise-type a2 a1)))
              (else (error "No methos for  these types")))))
          (error "No methos for  these types")))))