a)

首先从之前说的有关递归过程的几个关键点看一下这个递归过程

先看这个递归过程是如何减小问题规模
首先它把构造一个平衡树分为两步，一步是构建平衡的左子树，一步是构建平衡的右子树

然后再看这个递归过程的形状，以表（1 3 4 7 9 11）为例子

首先递归到n=0开始返回

(1 3)(5 7 9 11)             ; 分割左右子树

(5 7 9 11)                  ; 创建 1 节点
    /
   /
1(3)

   (5 7 9 11)               ; 创建 1 的左子树（空）
      /
     /
   1(3)
   /
  /
'()

    (5 7 9 11)              ; 创建 1 的右子树（包含 3）
      /
     /
    1
   / \
  /   \
'()    3

       5 (7 9 11)           ; 创建树根 5
      /
     /
    1
   / \
  /   \
'()    3

       5                    ; 创建 9 节点
      / \
     /   \
    1     9 (7 11)
   / \
  /   \
'()    3

         5                  ; 创建 9 的左子树（包含 7）
        /\
       /  \
      /    \
     /      \
    1        9 (11)
   / \      /
  /   \    /
'()    3  7

         5                  ; 创建 9 的右子树（包含 11）
        / \
       /   \
      /     \
     /       \
    1         9
   / \       / \
  /   \     /   \
'()    3   7    11

b)

对于列表中的每个节点， list->tree 都要执行一次 make-tree （复杂度为 Θ(1) ），将这个节点和它的左右子树组合起来，因此对于长度为 n 的列表来说， list->tree 的复杂度为 Θ(n) 。