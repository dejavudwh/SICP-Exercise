 (define (nearby? j k) 
   (>= 1 (abs (- j k)))) 
  
 (define (ordinary-multiple-dwelling) 
   (define (display-solution f s c m b) 
     (display 
      (list (list 'baker b) (list 'cooper c) 
            (list 'fletcher f) (list 'miller m) 
            (list 'smith s))) 
     (newline)) 
   (define (iter-f f) 
     (cond ((= f 1) (iter-f 2)) 
           ((= f 5) 'done) 
           (else (iter-s f 1)))) 
   (define (iter-s f s) 
     (cond ((> s 5) (iter-f (+ 1 f))) 
           ((= f s) (iter-s f (+ 1 s)))  ;; see additional note 
           (else (iter-c f s 1)))) 
   (define (iter-c f s c) 
     (cond ((> c 5) (iter-s f (+ 1 s))) 
           ((or (nearby? f c) (= c 1) (= c s)) 
            (iter-c f s (+ 1 c))) 
           (else (iter-m f s c 1)))) 
   (define (iter-m f s c m) 
     (cond ((> m 5) (iter-c f s (+ 1 c))) 
           ((or (<= m c) (= m s) (= m f)) 
            (iter-m f s c (+ 1 m))) 
           (else (iter-b f s c m 1)))) 
   (define (iter-b f s c m b) 
     (cond ((> b 5) (iter-m f s c (+ 1 m))) 
           (else (if (not (or (= b 5) (= b m) (= b c) (= b s) (= b f))) 
                     (display-solution f s c m b)) 
                 (iter-b f s c m (+ 1 b))))) 
   (iter-f 1)) 
  
 (ordinary-multiple-dwelling) 