;;a
(define (look-variable-value-4.16a var env)
  (define (evn-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-enviroment env)))
            ((eq? var (car vars)) (car vals))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "unbound variable" var)
        (let ((frame (fitst-frame env)))
          (scan (frame-variable frame)
                (frame-values frame)))))
  (let ((value (env-loop env)))
    (if (eq? value '*unassigned*)
        (error "unassigned var")
        value)))

;;b
(define (scan-out-defines body)
  (define (name-unassigned defines)
    (map (lambda (x) (list (definition-variable x) '*unassigned*)) defines))
  (define (set-values defines)
    (map (lambda (x) (list 'set! (definition-variable x) (definition-value)))
         defines))
  (define (defines->let expr defines no-defines)
    (cond ((null? exprs)
           (if (null? defines)
               body)
           (list (list 'let (name-unassigned defines)
                       (make-begin (append (set-values defines)
                                           (reverse not-defines))))))
          ((definition? (car exprs))
           (defines->let (cdr exprs) (cons (car exprs) defines) not-defines))
          (else (defines->let (cdr exprs) defines (cons (car exprs) not-defines)))))

 (define->let body '() '()))
    

         